<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Octopress | gep13's blog]]></title>
  <link href="http://www.gep13.co.uk/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://www.gep13.co.uk/"/>
  <updated>2016-09-05T09:19:02+00:00</updated>
  <id>http://www.gep13.co.uk/</id>
  <author>
    <name><![CDATA[gep13]]></name>
    <email><![CDATA[gep13@gep13.co.uk]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using a Basic Gallery Plugin on Octopress Site]]></title>
    <link href="http://www.gep13.co.uk/blog/using-a-basic-gallery-plugin-on-octopress-site/"/>
    <updated>2014-09-08T00:00:00+00:00</updated>
    <id>http://www.gep13.co.uk/blog/using-a-basic-gallery-plugin-on-octopress-site</id>
    <content type="html"><![CDATA[<h2>I have a lot of photos, but where to put them?</h2>

<p>Over the years, I have collected a number of photos from various trips that I have been on, and I share them in various places, i.e. Facebook, Twitter, Flickr, etc.  However, from time to time, I want to include them easily into blog posts as well.  This is something that &ldquo;should&rdquo; be easy, but my experience over the last few days is that it isn&rsquo;t as simple as it should be.  This is especially useful when doing a tutorial blog post, and you want to capture a number of screen-shots and show them in order in a gallery.</p>

<p>Having finally figured out how to get it working, I thought I would list the steps here for anyone else that might be running into the same problem.</p>

<!--more-->


<h2>What do I want?</h2>

<p>The requirements that I am looking for break down as follows:</p>

<ul>
<li>once set-up, I should be able to upload one or more images into a gallery folder and they should automatically added to associated blog post</li>
<li>thumbnail images should be automatically generated for photos uploaded into gallery folder</li>
<li>when clicked, thumbnail images should open a pop-up with a larger image</li>
<li>images in the same gallery should allow browsing left and right when an image is in popup window</li>
<li>should work in a range of devices, desktop, tablet, phone</li>
<li>should work as part of my AppVeyor build</li>
</ul>


<p>After hunting around, and trying various different options, I finally settled on using this <a href="https://github.com/yortz/octopress_gallery">plugin</a>.  From it&rsquo;s description, it should have been easy to get set up and running, but unfortunately, it took a bit of head scratching.</p>

<p>In the description for the plugin there is no mention of the dependency on an application called <code>ImageMagick</code>.  Now, in hindsight, it is clear that this will be required, but when I was reading through the simple steps of setting this up, it never occurred to me.  So first up, let&rsquo;s get <code>ImageMagick</code> installed.  If you are using <a href="http://chocolatey.org/">Chocolatey</a> then this is as simple as:</p>

<p><code>choco install imagemagick.tool</code></p>

<p>With that installed, step through the remaining instructions on the plugin page.</p>

<p>In addition to those steps, I also decided to add support for <a href="http://fancybox.net/">Fancybox</a> to make the experience a little nicer.  This involved the following:</p>

<ol>
<li>Make a slight modification to the <code>gallery_tag.rb</code> to work with Fancybox.  This basically involved adding a class definition to teh anchor tag, and also changing the rel attribute to be the gallery name, so that Fancybox groups the images in the gallery together.  The final version of the change can be seen <a href="https://github.com/gep13/gep13.github.io/commit/8f597cd922ffc3556481e7148990bcaa675dcceb#diff-dc86fc94e212fa637e5f2689a8379e1fR10">here</a>.</li>
<li>Download <a href="http://fancyapps.com/fancybox/#license">Fancybox</a></li>
<li>Unblock/extract the zip file</li>
<li>Add the contents of the source folder to <code>source\fancybox</code> as I have done <a href="https://github.com/gep13/gep13.github.io/tree/source/source/fancybox">here</a></li>
<li><p>Make the following additions to your <code>source\_includes\custom\head.html</code> file</p>

<p> <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/ol&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js&quot;</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="nx">jQuery</span><span class="p">.</span><span class="nx">noConflict</span><span class="p">();</span> <span class="c1">// ender.js conflicts with jQuery</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;&lt;</span><span class="nx">link</span> <span class="nx">rel</span><span class="o">=</span><span class="s2">&quot;stylesheet&quot;</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;http://www.gep13.co.uk/fancybox/jquery.fancybox.css&quot;</span> <span class="o">/&gt;&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;http://www.gep13.co.uk/fancybox/jquery.fancybox.pack.js&quot;</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">language</span><span class="o">=</span><span class="s2">&quot;Javascript&quot;</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="c1">// ender.js gobbles jQuery&#39;s ready event: Use ender.js $ instead</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">jQuery</span><span class="p">(</span><span class="s2">&quot;.fancybox&quot;</span><span class="p">).</span><span class="nx">fancybox</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>
</code></pre>

<ol>
<li>Create your gallery folder, and add the necessary changes to your config.yml file.  You can see the sample changes that I made <a href="https://github.com/gep13/gep13.github.io/commit/8f597cd922ffc3556481e7148990bcaa675dcceb">here</a>.</li>
<li>Add the gallery tag to your blog post.  In my case, this was <code>{{ 'gallery_1' | image_list }}</code></li>
<li>Then do a <code>rake generate</code></li>
<li>Assuming everything has worked, do a <code>rake preview</code> and view your hard work</li>
</ol>


<h2>Issue when doing rake generate</h2>

<p>When I first tried to do the above, the issue that I ran into looked like this:</p>

<blockquote><p>C:/projects/gep13-github-io/public/images/galleries/gallery_1/thumbs/6.jpg
149jekyll 2.3.0 | Error:  No such file or directory - identify -ping C:/Users/appveyor/AppData/Local/Temp/mini_magick20140907-3000-6k90ct.jpg</p></blockquote>

<p>This translates as, you don&rsquo;t have <code>ImageMagick</code> installed, go and get it.  I tried a few different installations, and ran into other issues with having the right developer DLL&rsquo;s and includes.  The upshot was, I couldn&rsquo;t find a solution to using the installed version of <code>ImageMagick</code>.  If however, I used the portable version, it works fine.  Go figure!</p>

<h2>Setting up AppVeyor</h2>

<p>So, the final piece of the puzzle, at least for me, was to get the same process working on AppVeyor, so that as part of the build process the thumbnails etc are generated.  Turns out again, thanks to AppVeyor extensibilty system, this is remarkably easy.  In fact, the changes that I need to make are exactly what I did on my own machine, i.e. install <code>ImageMagick</code> using Chocolatey.  Now, unlike my machine, the AppVeyor build machines don&rsquo;t have Chocolatey already installed, so we need to get it onto them.  This can be done using the <code>install</code> steps, as documented <a href="http://www.appveyor.com/docs/appveyor-yml">here</a>.</p>

<p>The final result was the following:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">install</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ps</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">iex ((new-object net.webclient).DownloadString(&amp;lsquo;&lt;a href=&quot;https://chocolatey.org/install.ps1&quot;&gt;https://chocolatey.org/install.ps1&lt;/a&gt;&amp;rsquo;))</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ps</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">choco install imagemagick.tool</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Two simple steps.  The first to install Chocolatey, and the second to install <code>ImageMagick</code> portable edition.  This will now happen each time my AppVeyor build runs, and it will generate the thumbnails for each of my galleries.</p>

<p>Job done!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup AppVeyor to Deploy Octopress Site to GitHub Pages]]></title>
    <link href="http://www.gep13.co.uk/blog/setup-appveyor-to-deploy-octopress-site-to-github-pages/"/>
    <updated>2014-09-05T00:00:00+00:00</updated>
    <id>http://www.gep13.co.uk/blog/setup-appveyor-to-deploy-octopress-site-to-github-pages</id>
    <content type="html"><![CDATA[<h2>History of this blog</h2>

<p>This blog has now been through a number of iterations.  It started out as a custom built blog application in ASP.NET, then it moved to BlogEngine.net for a very short period.  It then made an appearance as a WordPress Blog, and now, in it&rsquo;s current incarnation, it is using Octopress hosted on GitHub Pages.  This way of hosting my blog was very much inspired by the work of <a href="http://hadihariri.com/2013/12/24/migrating-from-wordpress-to-jekyll/">Hadi</a> and <a href="http://jake.ginnivan.net/blog/2014/06/10/low-friction-octopress-github-pages-setup/">Jake</a> in setting up their blogs, so thanks go to them for their help!  Hadi pointed me in the right direction in terms of migrating initially from Wordpress, and Jake showed how it was possible to deploy automagically to GitHub Pages.</p>

<p>The slightly different technique that I have used, and the reason for this post, is that I have used <a href="http://www.appveyor.com/">AppVeyor</a> to do the deployment of the generated static HTML to GitHub.  What follows are the steps to make this happen.</p>

<!--more-->


<h2>I love TeamCity, but&hellip;</h2>

<p>In Jake&rsquo;s <a href="http://jake.ginnivan.net/blog/2014/06/10/low-friction-octopress-github-pages-setup/">blog post</a>, he shows how you can use <a href="http://www.jetbrains.com/teamcity/">TeamCity</a> to listen for changes in the <code>source</code> branch of your Octopress Git Repository, generate the static html, and then push to the <code>master</code> branch of the same repository.  This is incredibly simple to do with TeamCity, but it obviously needs an available instance of TeamCity.  Unfortunately, this is not something that I have access to for personal (i.e. outside of work) projects.  As a result, I had to look elsewhere for a solution.  And for me, the solution was <a href="http://www.appveyor.com/">AppVeyor</a>.</p>

<p>After a <a href="http://help.appveyor.com/discussions/questions/491-use-appveyor-to-deploy-changes-to-octopress-blog">small hiccup</a> with setting up AppVeyor (which, by the way was resolved VERY quickly!), configuring AppVeyor to generate and deploy an Octopress site is very simple!</p>

<h2>Setting up continuous deployment from AppVeyor</h2>

<ol>
<li>If you don&rsquo;t already have one, <a href="https://ci.appveyor.com/signup/free">create an account</a> with AppVeyor (which is completely free, assuming your repository is public), and authenticate with either GitHub, BitBucket, Visual Studio Online, or Kiln, depending on where your blog source code is going to be hosted.  Since I am using GitHub Pages, I will be referring to that for the rest of this post.</li>
<li><p>Click New Project</p>

<p> <img src="/assets/posts/2014-09-05-setup-appveyor-to-deploy-octopress-site-to-github-pages/NewProject.png" alt="Click New Project" /></p></li>
<li><p>Select your blog source code repository, in my case gep13.github.io, and AppVeyor will set about provisioning a new Project, ready to accept build steps and configuration</p></li>
<li>At this point, you could start using the AppVeyor User Interface to setup the build, and this is what I started with.  However, I quickly realised that I would need to start using the <a href="http://www.appveyor.com/docs/appveyor-yml">appveyor.yml</a> file.  This was due to the fact that I wanted to be able to pass in a secure variables to the build process, namely my GitHub password, and this is not possible through the User Interface.</li>
<li><p>In the same way that Jake did, I have setup my GitHub repository to use the source branch as the default.  This can be done through the settings page of your repository in GitHub</p>

<p> <img src="/assets/posts/2014-09-05-setup-appveyor-to-deploy-octopress-site-to-github-pages/DefaultSourceBranch.png" alt="Set source branch as default in GitHub" /></p></li>
<li><p>Create an appveyor.yml file in the root of the source branch of your repository.  You can see mine <a href="https://github.com/gep13/gep13.github.io/blob/source/appveyor.yml">here</a>.</p></li>
<li><p>There are four important things in this file.  Firstly, the init section.  In order to push changes back to GitHub, you need to let the newly created Virtual Machine that AppVeyor is running for you know the git credentials that you want to use.  This can be done using the standard <code>git config --global</code> command.</p>

<p> <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">init:&lt;/p&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="l-Scalar-Plain">&lt;li&gt;git config &amp;ndash;global user.email &amp;ldquo;&lt;Your Email Address&gt;&amp;rdquo;&lt;/li&gt;</span>
</span><span class='line'><span class="l-Scalar-Plain">&lt;li&gt;&lt;p&gt;git config &amp;ndash;global user.name &amp;ldquo;&lt;Your User Name&gt;&amp;rdquo;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></p></li>
<li><p>The next important section is environment.  This is where you can specify 1 or more vaiables that you want to have available during your build steps.  If required, you can use the <a href="https://ci.appveyor.com/tools/encrypt">encrypt data tool</a> within AppVeyor to encrypt sensitive information.  This is exactly what I did with my GitHub password.</p>

<p> <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="l-Scalar-Plain">GithubUsername</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">gep13</span>
</span><span class='line'><span class="l-Scalar-Plain">GithubPassword</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="l-Scalar-Plain">secure</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">XSuLygmr83zEpWcXIXMXGocN0QbooLud1eIMA3mQWKkT9LAU4TyrijLBcJIo7bD7</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></p></li>
<li><p>Next up, we need to specify the actual operations that we want to perform.  These have been lifted exactly out of Jakes configuration.  The especically important thing to notice here is the <code>%GithubUsername%</code> and <code>%GithubPassword%</code> variables.  They refer to the environment variables that were configured above. <strong>NOTE:</strong>  As I found out, the <code>gen_deploy</code> rake task does both a generate and a deploy.</p>

<p> <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">build_script:&lt;/p&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="l-Scalar-Plain">&lt;li&gt;cmd</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">bundle install&lt;/li&gt;</span>
</span><span class='line'><span class="l-Scalar-Plain">&lt;li&gt;cmd</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">if not exist &lt;em&gt;deploy (git clone &lt;a href=&quot;https://%GithubUsername%:%GithubPassword%@github.com/%GithubUsername%/%GithubUsername%.github.io.git&quot;&gt;https://%GithubUsername%:%GithubPassword%@github.com/%GithubUsername%/%GithubUsername%.github.io.git&lt;/a&gt; &lt;/em&gt;deploy)&lt;/li&gt;</span>
</span><span class='line'><span class="l-Scalar-Plain">&lt;li&gt;cmd</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cd _deploy&lt;/li&gt;</span>
</span><span class='line'><span class="l-Scalar-Plain">&lt;li&gt;cmd</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git checkout master&lt;/li&gt;</span>
</span><span class='line'><span class="l-Scalar-Plain">&lt;li&gt;cmd</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cd ..&lt;/li&gt;</span>
</span><span class='line'><span class="l-Scalar-Plain">&lt;li&gt;&lt;p&gt;cmd</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">rake gen_deploy  &lt;br/&gt;</span>
</span></code></pre></td></tr></table></div></figure></p></li>
<li><p>The final things that I needed to do was to specify that I didn&rsquo;t want to run any tests after the main build steps were completed.  This can be done using:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">off</span>
</span></code></pre></td></tr></table></div></figure></p></li>
<li><p>With the above file checked into your repository, AppVeyor will set about doing the build.  The output of which should hopefully look something like this (the full output can be seen <a href="https://ci.appveyor.com/project/GaryEwanPark/gep13-github-io/build/1.0.22">here</a>)</p>

<p><img src="/assets/posts/2014-09-05-setup-appveyor-to-deploy-octopress-site-to-github-pages/SuccessfulBuild.png" alt="Successful AppVeyor Build" /></p></li>
</ol>


<p>And that, as they say, is that!</p>

<p>Now, everytime you make a change in the <code>source</code> branch of your Octopress Repository, AppVeyor will collect all the changes, execute the build steps, and deploy your latest changes to the <code>master</code> branch, ready for viewing on your site.</p>
]]></content>
  </entry>
  
</feed>
